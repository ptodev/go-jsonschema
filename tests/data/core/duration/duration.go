// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import (
	"encoding/json"
	"time"

	yaml "gopkg.in/yaml.v3"
)
            
            type Duration struct {
            	// MyObject corresponds to the JSON schema field "myObject".
            	MyObject *DurationMyObject `json:"myObject,omitempty" yaml:"myObject,omitempty" mapstructure:"myObject,omitempty"`
            }
            
            type DurationMyObject struct {
            	// MyDateTime corresponds to the JSON schema field "myDateTime".
            	MyDateTime time.Duration `json:"myDateTime,omitempty" yaml:"myDateTime,omitempty" mapstructure:"myDateTime,omitempty"`
            }
            
            // UnmarshalJSON implements json.Unmarshaler.
            func (j *DurationMyObject) UnmarshalJSON(value []byte) error {
            	var raw map[string]interface{}
            	if err := json.Unmarshal(value, &raw); err != nil {
            		return err
            	}
            	type Plain DurationMyObject
            	var plain Plain
            	if err := json.Unmarshal(value, &plain); err != nil {
            		return err
            	}
            	*j = DurationMyObject(plain)
            	return nil
            }
            
            // UnmarshalYAML implements yaml.Unmarshaler.
            func (j *DurationMyObject) UnmarshalYAML(value *yaml.Node) error {
            	var raw map[string]interface{}
            	if err := value.Decode(&raw); err != nil {
            		return err
            	}
            	type Plain DurationMyObject
            	var plain Plain
            	if err := value.Decode(&plain); err != nil {
            		return err
            	}
            	*j = DurationMyObject(plain)
            	return nil
            }